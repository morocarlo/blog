{"version":3,"sources":["webpack:///./src/components/posts-list.js","webpack:///./src/templates/blog-template.js"],"names":["PostsList","posts","map","node","title","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","excerpt","BlogTemplate","render","data","this","props","siteTitle","site","siteMetadata","allMarkdownRemark","edges","pageContext","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","location","rel","React","Component","pageBlogQuery"],"mappings":"6FAAA,mFAIO,SAASA,EAAT,GAA6B,IAATC,EAAQ,EAARA,MACzB,OACE,oCACGA,EAAMC,KAAI,YAAa,IAAXC,EAAU,EAAVA,KACLC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACI,6BAASC,IAAKL,EAAKG,OAAOC,MACtB,gCACI,wBACAE,MAAO,CACHC,aAAcC,YAAO,OAGzB,kBAAC,OAAD,CAAMF,MAAO,CAACG,UAAU,QAAUC,GAAIV,EAAKG,OAAOC,MAC7CH,IAGL,+BAAQD,EAAKE,YAAYS,OAE7B,iCACI,uBAAGC,wBAAyB,CAACC,OAAQb,EAAKc,mB,oMChBxDC,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAarB,MACnCH,EAAQmB,EAAKM,kBAAkBC,MAH9B,EAK2BN,KAAKC,MAAMM,YAArCC,EALD,EAKCA,YACFC,EAA0B,IAAhBD,EACVE,EAASF,IAPR,EAKcG,SAGfC,EAAWJ,EAAc,GAAM,EAAI,SAAW,UAAYA,EAAc,GAAGK,WAC3EC,EAAW,UAAYN,EAAc,GAAGK,WAE9C,OACE,kBAAC,IAAD,CAAQE,SAAUf,KAAKC,MAAMc,SAAUhC,MAAOmB,GAC5C,kBAAC,IAAD,CAAKnB,MAAM,cAEX,kBAAC,IAAD,CAAWH,MAAOA,IAElB,wBACIQ,MAAO,CACLC,aAAcC,YAAO,OAIzBmB,GAEA,kBAAC,OAAD,CAAMjB,GAAIoB,EAAUI,IAAI,QAAxB,oBAIAN,GACA,kBAAC,OAAD,CAAMlB,GAAIsB,EAAUE,IAAI,QAAxB,iB,GA/BiBC,IAAMC,WAyClBrB,YAER,IAAMsB,EAAa","file":"component---src-templates-blog-template-js-96556da5173ec47d9f33.js","sourcesContent":["import {rhythm} from '../utils/typography'\nimport {Link} from 'gatsby'\nimport React from 'react'\n\nexport function PostsList({posts}) {\n  return (\n    <>\n      {posts.map(({node}) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n            <article key={node.fields.slug}>\n                <header>\n                    <h3\n                    style={{\n                        marginBottom: rhythm(1 / 4),\n                    }}\n                    >\n                    <Link style={{boxShadow: `none`}} to={node.fields.slug}>\n                        {title}\n                    </Link>\n                    </h3>\n                    <small>{node.frontmatter.date}</small>\n                </header>\n                <section>\n                    <p dangerouslySetInnerHTML={{__html: node.excerpt}} />\n                </section>\n            </article>\n        )\n      })}\n    </>\n  )\n}","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport { PostsList } from \"../components/posts-list\"\n\nclass BlogTemplate extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? \"/blog/\" : \"/blog/\" + (currentPage - 1).toString()\n    const nextPage = \"/blog/\" + (currentPage + 1).toString()\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n\n        <PostsList posts={posts} />\n\n        <hr\n            style={{\n              marginBottom: rhythm(1),\n            }}\n         />\n\n        {!isFirst && (\n          \n          <Link to={prevPage} rel=\"prev\">\n            ← Previous Page\n          </Link>\n        )}\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            Next Page →\n          </Link>\n        )}\n\n      </Layout>\n    )\n  }\n}\n\nexport default BlogTemplate\n\nexport const pageBlogQuery = graphql`\n  query pageBlogQuery($skip: Int, $limit: Int) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: {published: {ne: false}}}\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            tags\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}